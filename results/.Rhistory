g <- function(beta, x) {}
g <- function(beta, x) {return(1/(1+exp(beta*x)))}
x <- -1:1
x
x <- -1:0.1:1
x <- -1::0.1::1
x <- -1:1:0.1
x <- seq(-1, 1, 0.1)
g(100, x)
plot(g(100, x))
plot(g(1000, x))
plot(g(1000000, x))
plot(g(1000000000000000000000000000, x))
plot(g(1, x))
plot(x, g(1, x))
points(x, g(5, x))
plot(x, g(100, x))
points(x, g(10, x))
points(x, g(5, x))
points(x, g(2, x))
gm <- function(beta, x) {return(1/(1-exp(beta*x)))}
plot(x, gm(10, x))
g <- function(beta, x) {return(1/(1+exp(-beta*x)))}
plot(x, g(10, x))
g <- function(beta, x) {return(1/(1+exp(-beta*x)))}
plot(x, g(100, x), c='red')
plot(x, g(100, x), color='red')
help plot
help
help("plot")
help(size)
??size
??length
?rep
g_arai <- function(x) {
f <- rep(0, length(x))
f[x<0] <- 0
f[x>=0]<- 2/(1+exp(-0.8*x)) -1
return(f)}
plot(x, g_arai(100, x), col='red')
points(x, g_arai(10, x), col='green')
points(x, g_arai(5, x), col='blue')
## in Arai et al. 1994
g_arai <- function(beta, x) {
f <- rep(0, length(x))
f[x<0] <- 0
f[x>=0]<- 2/(1+exp(-beta*x)) -1
return(f)}
plot(x, g_arai(100, x), col='red')
points(x, g_arai(10, x), col='green')
points(x, g_arai(5, x), col='blue')
points(x, g_arai(0.8, x), col='blue')
## in Arai et al. 1994
g_arai <- function(beta, x) {
f <- rep(0, length(x))
f[x<0] <- 0
f[x>=0]<- 2/(1+exp(-beta*x[x>=0])) -1
return(f)}
plot(x, g_arai(100, x), col='red')
points(x, g_arai(10, x), col='green')
points(x, g_arai(5, x), col='blue')
points(x, g_arai(0.8, x), col='blue')
plot(x, g_arai(0.8, x), col='red')
points(x, g(4, x), col='blue')
plot(x, g(4, x), col='blue')
points(x, g_arai(0.8, x), col='red')
## in Arai et al. 1994
g_arai <- function(beta, x) {
f <- rep(0, length(x))
f[x<0] <- 0
f[x>=0]<- 2/(1+exp(-beta*x[x>=0])) #-1
return(f)}
plot(x, g_arai(100, x), col='red')
points(x, g_arai(10, x), col='green')
points(x, g_arai(5, x), col='blue')
points(x, g_arai(0.8, x), col='blue')
# default value of DNF in blue vs value in Arai et al. 1994
plot(x, g(4, x), col='blue')
points(x, g_arai(0.8, x), col='red')
## in Arai et al. 1994
g_arai <- function(beta, x) {
f <- rep(0, length(x))
f[x<0] <- 0
f[x>=0]<- 2/(1+exp(-beta*x[x>=0])) #-1
return(f)}
plot(x, g_arai(100, x), col='red')
points(x, g_arai(10, x), col='green')
points(x, g_arai(5, x), col='blue')
points(x, g_arai(0.8, x), col='blue')
knit_with_parameters('~/Bitbucket/Initiation Saccade Model/Notes/Noise Interactions/Notes on noise interaction.Rmd')
setwd("/home/c1248317/Bitbucket/Dinasaur/results")
install.packages("R.matlab")
d <- readMat("distances/table_distance.mat")
d
l
library(R.matlab)
d <- readMat("distances/table_distance.mat")
d
d[[2]]
d1 <- d[[3]]
dim(d1)
r <- readMat("distances/results_distance.mat")
d$``
d$MCOS
r$results
r$results['target.RTs']
r$results[[8]]
r$results[8]
r$results[,,8]
r$results[,8]
dim(r$results[,,8])
summarize(r$results[,,8])
sumarize(r$results[,,8])
summary(r$results[,,8])
summary(r$results[,,8]$membrane.potential)
summary(r$results[,,8])
summary(r$results[,,1])
summary(r$results[,,1]$firing.rate)
summary(r$results[,,1])
r$results[,,1]$target.RTs
r$results[,,1]$values
print(r)
d <- read.csv("distances/table_distance.csv")
d
r <- readMat("distances/results_distance.mat")
summary(r)
summary(r$results)
summary(r)
summary(r$MCOS)
summary(r$``)
summary(r$results)
summary(r$results[41])
summary(r$results[41,])
summary(r$results[41][1])
summary(r$results[[41]])
dim(r$results[[41]])
summary(r$results[,,1])
summary(r$results[1])
summary(r$results[2])
summary(r$results[3])
r$results[3]
r$results[1]
r$results[2]
r$results[3]
r$results[4]
r$results[5]
r$results[6]
r$results$values
r$results
summary(r$results)
results[[8]]
summary(r$results)
summary(r$results[[8]])
summary(r$results[[7]])
summary(r$results[7])
summary(r$results[[7]])
summary(r$results[[7]][1])
dim(r$results[[7]])
dim(r$results[[10]])
dim(r$results[,,8])
summary(r$results[,,8])
summary(r$results[,8])
summary(r$results[8])
summary(r$results[[8]])
summary(r$results)
r$results
r$results[,,8]$firing.rate
r
summary(r)
summary(r$results)
r <- r$results
r
r[, , 8]
summary(r[, , 8])
r8 <- r[, , 8]
r8
r <- readMat("distances/results_distance.mat")
summary(r$results[,,1])
r$results
summary(r$results)
r <- readMat("distances/results_distance.mat")
r$results
